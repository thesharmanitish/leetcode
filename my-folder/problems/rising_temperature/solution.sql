#{"submissions_dump":[{"id":931199976,"lang":"mysql","lang_name":"MySQL","time":"7 minutes","timestamp":1681120342,"status":10,"status_display":"Accepted","runtime":"1122 ms","url":"/submissions/detail/931199976/","is_pending":"Not Pending","title":"Rising Temperature","memory":"0B","code":"SELECT\n    weather.id AS 'Id'\nFROM\n    weather\n        JOIN\n    weather w ON DATEDIFF(weather.recordDate, w.recordDate) = 1\n        AND weather.Temperature > w.Temperature\n;","compare_result":"11111111111111","title_slug":"rising-temperature","has_notes":false},{"id":931198867,"lang":"java","lang_name":"Java","time":"10 minutes","timestamp":1681120186,"status":10,"status_display":"Accepted","runtime":"7 ms","url":"/submissions/detail/931198867/","is_pending":"Not Pending","title":"Combination Sum II","memory":"43.5 MB","code":"class Solution {\n    public List<List<Integer>> combinationSum2(int[] candidates, int target) {\n        // container to hold the final combinations\n        List<List<Integer>> results = new ArrayList<>();\n        LinkedList<Integer> comb = new LinkedList<>();\n\n        HashMap<Integer, Integer> counter = new HashMap<>();\n        for (int candidate : candidates) {\n            if (counter.containsKey(candidate))\n                counter.put(candidate, counter.get(candidate) + 1);\n            else\n                counter.put(candidate, 1);\n        }\n\n        // convert the counter table to a list of (num, count) tuples\n        List<int[]> counterList = new ArrayList<>();\n        counter.forEach((key, value) -> {\n            counterList.add(new int[]{key, value});\n        });\n\n        backtrack(comb, target, 0, counterList, results);\n        return results;\n    }\n\n    private void backtrack(LinkedList<Integer> comb,\n                           int remain, int curr,\n                           List<int[]> counter,\n                           List<List<Integer>> results) {\n\n        if (remain <= 0) {\n            if (remain == 0) {\n                // make a deep copy of the current combination.\n                results.add(new ArrayList<Integer>(comb));\n            }\n            return;\n        }\n\n        for (int nextCurr = curr; nextCurr < counter.size(); ++nextCurr) {\n            int[] entry = counter.get(nextCurr);\n            Integer candidate = entry[0], freq = entry[1];\n\n            if (freq <= 0)\n                continue;\n\n            // add a new element to the current combination\n            comb.addLast(candidate);\n            counter.set(nextCurr, new int[]{candidate, freq - 1});\n\n            // continue the exploration with the updated combination\n            backtrack(comb, remain - candidate, nextCurr, counter, results);\n\n            // backtrack the changes, so that we can try another candidate\n            counter.set(nextCurr, new int[]{candidate, freq});\n            comb.removeLast();\n        }\n    }\n}","compare_result":"11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"combination-sum-ii","has_notes":false},{"id":931197016,"lang":"java","lang_name":"Java","time":"14 minutes","timestamp":1681119932,"status":10,"status_display":"Accepted","runtime":"0 ms","url":"/submissions/detail/931197016/","is_pending":"Not Pending","title":"Longest Common Prefix","memory":"40.9 MB","code":"class Solution {\n public String longestCommonPrefix(String[] strs) {\n    if (strs.length == 0) return \"\";\n    String prefix = strs[0];\n    for (int i = 1; i < strs.length; i++)\n        while (strs[i].indexOf(prefix) != 0) {\n            prefix = prefix.substring(0, prefix.length() - 1);\n            if (prefix.isEmpty()) return \"\";\n        }        \n    return prefix;\n}\n}","compare_result":"1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"longest-common-prefix","has_notes":false},{"id":931196913,"lang":"java","lang_name":"Java","time":"14 minutes","timestamp":1681119918,"status":20,"status_display":"Compile Error","runtime":"N/A","url":"/submissions/detail/931196913/","is_pending":"Not Pending","title":"Longest Common Prefix","memory":"N/A","code":" public String longestCommonPrefix(String[] strs) {\n    if (strs.length == 0) return \"\";\n    String prefix = strs[0];\n    for (int i = 1; i < strs.length; i++)\n        while (strs[i].indexOf(prefix) != 0) {\n            prefix = prefix.substring(0, prefix.length() - 1);\n            if (prefix.isEmpty()) return \"\";\n        }        \n    return prefix;\n}","compare_result":null,"title_slug":"longest-common-prefix","has_notes":false},{"id":931168342,"lang":"java","lang_name":"Java","time":"1 hour, 24 minutes","timestamp":1681115721,"status":10,"status_display":"Accepted","runtime":"4 ms","url":"/submissions/detail/931168342/","is_pending":"Not Pending","title":"Convert an Array Into a 2D Array With Conditions","memory":"43.2 MB","code":"class Solution {\n    public List<List<Integer>> findMatrix(int[] nums) {\n        int a[]=new int[201];\n        for(int i:nums)\n        {\n            a[i]++;\n        }\n        List<List<Integer>> kk=new ArrayList<>();\n        while(true)\n        {\n            List<Integer> k=new ArrayList<>();\n            int x=0;\n            for(int i=0;i<201;i++)\n            {\n                if(a[i]>0)\n                {\n                    k.add(i);\n                    a[i]-=1;\n                }\n                else\n                {\n                    x++;\n                }\n            }\n            if(x==201)\n            {\n                break;\n            }\n            kk.add(new ArrayList<>(k));\n        }\n        return kk;\n    }\n}","compare_result":"111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"convert-an-array-into-a-2d-array-with-conditions","has_notes":false},{"id":931168080,"lang":"java","lang_name":"Java","time":"1 hour, 25 minutes","timestamp":1681115688,"status":15,"status_display":"Runtime Error","runtime":"N/A","url":"/submissions/detail/931168080/","is_pending":"Not Pending","title":"Convert an Array Into a 2D Array With Conditions","memory":"N/A","code":"class Solution {\n    public List<List<Integer>> findMatrix(int[] A) {\n        ArrayList<List<Integer>> res = new ArrayList<>();\n        int n = A.length, count[] = new int[n + 1];\n        for (int a : A) {\n            if (res.size() < ++count[a])\n                res.add(new ArrayList<>());\n            res.get(count[a]).add(a);\n        }\n        return res;\n    }\n}","compare_result":"000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000","title_slug":"convert-an-array-into-a-2d-array-with-conditions","has_notes":false},{"id":931167725,"lang":"java","lang_name":"Java","time":"1 hour, 26 minutes","timestamp":1681115635,"status":10,"status_display":"Accepted","runtime":"3 ms","url":"/submissions/detail/931167725/","is_pending":"Not Pending","title":"Valid Parentheses","memory":"40.4 MB","code":"class Solution {\n    public boolean isValid(String s) {\n  // O(mn)\n        Stack<Character> q = new Stack<>();\n        Map<Character, Character> symbolMap =  new HashMap<>();\n        symbolMap.put(')', '(');\n        symbolMap.put('}', '{');\n        symbolMap.put(']', '[');\n        for(char ch:s.toCharArray()){  // O(n) n= length of String\n            if(!symbolMap.containsKey(ch)) // O(m) m = size of stack\n                q.push(ch);\n            else{\n                if(q.isEmpty()|| q.pop()!=symbolMap.get(ch))\n                    return false;\n            }\n        }\n        return q.isEmpty();\n    }\n}","compare_result":"111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"valid-parentheses","has_notes":false},{"id":930876517,"lang":"java","lang_name":"Java","time":"15 hours, 26 minutes","timestamp":1681065236,"status":10,"status_display":"Accepted","runtime":"2 ms","url":"/submissions/detail/930876517/","is_pending":"Not Pending","title":"Find the Longest Balanced Substring of a Binary String","memory":"42.7 MB","code":"class Solution {\n    public int findTheLongestBalancedSubstring(String s) {\n        int max = 0;\n        for(int i = 0; i < s.length(); ){\n            int z = 0, o = 0;\n            while(i < s.length() && s.charAt(i) == '0') {\n                z++;\n                i++;\n            }\n            while(i < s.length() && s.charAt(i) =='1' && z > o){\n                o++;\n                i++;  \n                max = Math.max(max, o*2);\n            } \n            while(i < s.length() && s.charAt(i) == '1') i++;\n        }\n        return max;\n    }\n}\n","compare_resulttitle_slug":"find-the-longest-balanced-substring-of-a-binary-string","has_notes":false},{"id":930873130,"lang":"java","lang_name":"Java","time":"15 hours, 33 minutes","timestamp":1681064825,"status":10,"status_display":"Accepted","runtime":"13 ms","url":"/submissions/detail/930873130/","is_pending":"Not Pending","title":"Prime In Diagonal","memory":"51.7 MB","code":"class Solution {\n    public int diagonalPrime(int[][] nums) {\n        int maxi=0;\n        for(int i=0;i<nums.length;i++)\n        {\n            if(prime(nums[i][i]))\n            {\n                maxi=Math.max(maxi,nums[i][i]);\n            }\n            if(prime(nums[nums.length-i-1][i]))\n            {\n                maxi=Math.max(maxi,nums[nums.length-i-1][i]);\n            }\n        }\n        return maxi;\n    }\n    public boolean prime(int n)\n    {\n        if(n<2)\n        {\n            return false;\n        }\n        for(int i=2;i<=Math.sqrt(n);i++)\n        {\n            if(n%i==0)\n            {\n                return false;\n            }\n        }\n        return true;\n    }\n}","compare_result":"1111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"prime-in-diagonal","has_notes":false},{"id":930851108,"lang":"java","lang_name":"Java","time":"16 hours, 17 minutes","timestamp":1681062186,"status":10,"status_display":"Accepted","runtime":"81 ms","url":"/submissions/detail/930851108/","is_pending":"Not Pending","title":"Largest Color Value in a Directed Graph","memory":"133 MB","code":"class Solution {\r\n  public int largestPathValue(String colors, int[][] edges) {\r\n        int n = colors.length();\r\n        Map<Integer, List<Integer>> adj = new HashMap<>();\r\n        int[] indegree = new int[n];\r\n\r\n        for (int[] edge : edges) {\r\n            adj.computeIfAbsent(edge[0], k->new ArrayList<Integer>()).add(edge[1]);\r\n            indegree[edge[1]]++;\r\n        }\r\n\r\n        int[][] count = new int[n][26];\r\n        Queue<Integer> q = new LinkedList<>();\r\n\r\n        // Push all the nodes with indegree zero in the queue.\r\n        for (int i = 0; i < n; i++) {\r\n            if (indegree[i] == 0) {\r\n                q.offer(i);\r\n            }\r\n        }\r\n\r\n        int answer = 1, nodesSeen = 0;\r\n        while (!q.isEmpty()) {\r\n            int node = q.poll();\r\n\r\n\r\n            answer = Math.max(answer, ++count[node][colors.charAt(node) - 'a']);\r\n            nodesSeen++;\r\n            if (!adj.containsKey(node)) {\r\n                continue;\r\n            }\r\n\r\n            for(int neighbour:adj.get(node)){\r\n                for(int i=0;i<26;i++){\r\n                    count[neighbour][i] = Math.max(count[neighbour][i], count[node][i]);\r\n                } \r\n                indegree[neighbour]--;\r\n                if(indegree[neighbour] ==0)\r\n                    q.offer(neighbour);\r\n            }\r\n            \r\n        }\r\n\r\n        return nodesSeen < n ? -1 : answer;\r\n    }\r\n}","compare_result":"11111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"largest-color-value-in-a-directed-graph","has_notes":false},{"id":930683018,"lang":"java","lang_name":"Java","time":"22 hours, 58 minutes","timestamp":1681038087,"status":10,"status_display":"Accepted","runtime":"94 ms","url":"/submissions/detail/930683018/","is_pending":"Not Pending","title":"Largest Color Value in a Directed Graph","memory":"133.2 MB","code":"class Solution {\r\n  public int largestPathValue(String colors, int[][] edges) {\r\n        int n = colors.length();\r\n        Map<Integer, List<Integer>> adj = new HashMap<>();\r\n        int[] indegree = new int[n];\r\n\r\n        for (int[] edge : edges) {\r\n            adj.computeIfAbsent(edge[0], k->new ArrayList<Integer>()).add(edge[1]);\r\n            indegree[edge[1]]++;\r\n        }\r\n\r\n        int[][] count = new int[n][26];\r\n        Queue<Integer> q = new LinkedList<>();\r\n\r\n        // Push all the nodes with indegree zero in the queue.\r\n        for (int i = 0; i < n; i++) {\r\n            if (indegree[i] == 0) {\r\n                q.offer(i);\r\n            }\r\n        }\r\n\r\n        int answer = 1, nodesSeen = 0;\r\n        while (!q.isEmpty()) {\r\n            int node = q.poll();\r\n            answer = Math.max(answer, ++count[node][colors.charAt(node) - 'a']);\r\n            nodesSeen++;\r\n\r\n            if (!adj.containsKey(node)) {\r\n                continue;\r\n            }\r\n\r\n            for (int neighbor : adj.get(node)) {\r\n                for (int i = 0; i < 26; i++) {\r\n                    // Try to update the frequency of colors for the neighbor to include paths\r\n                    // that use node->neighbor edge.\r\n                    count[neighbor][i] = Math.max(count[neighbor][i], count[node][i]);\r\n                }\r\n\r\n                indegree[neighbor]--;\r\n                if (indegree[neighbor] == 0) {\r\n                    q.offer(neighbor);\r\n                }\r\n            }\r\n        }\r\n\r\n        return nodesSeen < n ? -1 : answer;\r\n    }\r\n}","compare_result":"11111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"largest-color-value-in-a-directed-graph","has_notes":false},{"id":930680825,"lang":"java","lang_name":"Java","time":"23 hours, 4 minutes","timestamp":1681037749,"status":11,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/930680825/","is_pending":"Not Pending","title":"Largest Color Value in a Directed Graph","memory":"N/A","code":"class Solution {\r\n    public int largestPathValue(String colors, int[][] edges) {\r\n        Map<Integer, List<Integer>> map = new HashMap<>();\r\n        Set<Integer> set = new HashSet<>();\r\n        Set<Integer> set2 = new HashSet<>();\r\n        for(int[] edge:edges){\r\n            set.add(edge[1]);\r\n            \r\n            if(set2.contains(edge[1]))\r\n                set2.remove(edge[1]);\r\n            if(set.contains(edge[0]))\r\n                set2.remove(edge[0]);\r\n            map.computeIfAbsent(edge[0], v-> new ArrayList<>()).add(edge[1]);\r\n            set2.add(edge[0]);\r\n        }\r\n        Queue<Integer> bfs = new LinkedList<>();\r\n        \r\n        int max = 0;\r\n        for(int node:set2){\r\n            set.clear();\r\n            bfs.add(node);\r\n            set.add(node);\r\n            int count = 0;\r\n            while(!bfs.isEmpty()){\r\n                int x = bfs.poll();\r\n                if(!map.containsKey(x))\r\n                    continue;\r\n                for(int n:map.get(x)){\r\n                    if(set.contains(n))\r\n                        return -1;\r\n                    \r\n                    bfs.add(n);\r\n                    set.add(n);;\r\n                }\r\n                count++;\r\n\r\n            }\r\n            max= Math.max(max, count);\r\n        }\r\n        return max;\r\n    }\r\n}","compare_result":"11000000000000000000000100000000011010000000000000000000000000000000000000011111011","title_slug":"largest-color-value-in-a-directed-graph","has_notes":false},{"id":930680463,"lang":"java","lang_name":"Java","time":"23 hours, 5 minutes","timestamp":1681037698,"status":11,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/930680463/","is_pending":"Not Pending","title":"Largest Color Value in a Directed Graph","memory":"N/A","code":"class Solution {\r\n    public int largestPathValue(String colors, int[][] edges) {\r\n        Map<Integer, List<Integer>> map = new HashMap<>();\r\n        Set<Integer> set = new HashSet<>();\r\n        Set<Integer> set2 = new HashSet<>();\r\n        for(int[] edge:edges){\r\n            set.add(edge[1]);\r\n            \r\n            if(set2.contains(edge[1]))\r\n                set2.remove(edge[1]);\r\n            if(set.contains(edge[0]))\r\n                set2.remove(edge[0]);\r\n            map.computeIfAbsent(edge[0], v-> new ArrayList<>()).add(edge[1]);\r\n            set2.add(edge[0]);\r\n        }\r\n        Queue<Integer> bfs = new LinkedList<>();\r\n        \r\n        int max = 0;\r\n        for(int node:set2){\r\n            set.clear();\r\n            bfs.add(node);\r\n            set.add(node);\r\n            int count = 0;\r\n            while(!bfs.isEmpty()){\r\n                int x = bfs.poll();\r\n                if(!map.containsKey(x))\r\n                    continue;\r\n                for(int n:map.get(x)){\r\n                    if(set.contains(n))\r\n                        return -1;\r\n                    \r\n                    bfs.add(n);\r\n                }\r\n                count++;\r\n\r\n            }\r\n            max= Math.max(max, count);\r\n        }\r\n        return max;\r\n    }\r\n}","compare_result":"11000000000000000000000100000000011010000000000000000000000000000000000000000000000","title_slug":"largest-color-value-in-a-directed-graph","has_notes":false},{"id":930283239,"lang":"java","lang_name":"Java","time":"1 day, 15 hours","timestamp":1680978923,"status":10,"status_display":"Accepted","runtime":"25 ms","url":"/submissions/detail/930283239/","is_pending":"Not Pending","title":"Clone Graph","memory":"42.7 MB","code":"/*\n// Definition for a Node.\nclass Node {\n    public int val;\n    public List<Node> neighbors;\n    public Node() {\n        val = 0;\n        neighbors = new ArrayList<Node>();\n    }\n    public Node(int _val) {\n        val = _val;\n        neighbors = new ArrayList<Node>();\n    }\n    public Node(int _val, ArrayList<Node> _neighbors) {\n        val = _val;\n        neighbors = _neighbors;\n    }\n}\n*/\n\nclass Solution {\n    public Node cloneGraph(Node node) {\n        if(node == null)\n            return node;\n        Queue<Node> bfs = new LinkedList<>();\n\n        Map<Integer, Node> map = new HashMap<>();\n        map.put(node.val,new Node(node.val));\n        bfs.add(node);\n        while(!bfs.isEmpty()){\n            Node next = bfs.poll();\n            for(Node child:next.neighbors){\n                if(!map.containsKey(child.val) ){\n                    map.put(child.val,new Node(child.val));                \n                    bfs.add(child);\n                }\n                map.get(next.val).neighbors.add(map.get(child.val));\n            }\n        }\n\n        return map.get(node.val);\n    }\n}","compare_result":"1111111111111111111111","title_slug":"clone-graph","has_notes":false},{"id":930282498,"lang":"java","lang_name":"Java","time":"1 day, 15 hours","timestamp":1680978834,"status":10,"status_display":"Accepted","runtime":"25 ms","url":"/submissions/detail/930282498/","is_pending":"Not Pending","title":"Clone Graph","memory":"43 MB","code":"/*\n// Definition for a Node.\nclass Node {\n    public int val;\n    public List<Node> neighbors;\n    public Node() {\n        val = 0;\n        neighbors = new ArrayList<Node>();\n    }\n    public Node(int _val) {\n        val = _val;\n        neighbors = new ArrayList<Node>();\n    }\n    public Node(int _val, ArrayList<Node> _neighbors) {\n        val = _val;\n        neighbors = _neighbors;\n    }\n}\n*/\n\nclass Solution {\n    public Node cloneGraph(Node node) {\n        if(node == null)\n            return node;\n        Queue<Node> bfs = new LinkedList<>();\n\n        Map<Integer, Node> map = new HashMap<>();\n        map.put(node.val,new Node(node.val));\n        bfs.add(node);\n        while(!bfs.isEmpty()){\n            Node next = bfs.poll();\n            for(Node child:next.neighbors){\n                if(!map.containsKey(child.val) ){\n                    map.put(child.val,new Node(child.val));                \n                    bfs.add(child);\n                }\n                map.get(next.val).neighbors.add(map.get(child.val));\n            }\n        }\n\n        return map.get(node.val);\n    }\n}","compare_result":"1111111111111111111111","title_slug":"clone-graph","has_notes":false},{"id":930281359,"lang":"java","lang_name":"Java","time":"1 day, 15 hours","timestamp":1680978699,"status":10,"status_display":"Accepted","runtime":"25 ms","url":"/submissions/detail/930281359/","is_pending":"Not Pending","title":"Clone Graph","memory":"42.4 MB","code":"/*\n// Definition for a Node.\nclass Node {\n    public int val;\n    public List<Node> neighbors;\n    public Node() {\n        val = 0;\n        neighbors = new ArrayList<Node>();\n    }\n    public Node(int _val) {\n        val = _val;\n        neighbors = new ArrayList<Node>();\n    }\n    public Node(int _val, ArrayList<Node> _neighbors) {\n        val = _val;\n        neighbors = _neighbors;\n    }\n}\n*/\n\nclass Solution {\n    public Node cloneGraph(Node node) {\n        if(node == null)\n            return node;\n        Queue<Node> bfs = new LinkedList<>();\n\n        Map<Integer, Node> map = new HashMap<>();\n        map.put(node.val,new Node(node.val));\n        bfs.add(node);\n        while(!bfs.isEmpty()){\n            Node next = bfs.poll();\n            for(Node child:next.neighbors){\n                if(!map.containsKey(child.val) ){\n                    map.put(child.val,new Node(child.val));                \n                    bfs.add(child);\n                }\n                map.get(next.val).neighbors.add(map.get(child.val));\n            }\n        }\n\n        return map.get(node.val);\n    }\n}","compare_result":"1111111111111111111111","title_slug":"clone-graph","has_notes":false},{"id":930260045,"lang":"java","lang_name":"Java","time":"1 day, 16 hours","timestamp":1680976203,"status":10,"status_display":"Accepted","runtime":"26 ms","url":"/submissions/detail/930260045/","is_pending":"Not Pending","title":"Clone Graph","memory":"42.9 MB","code":"/*\n// Definition for a Node.\nclass Node {\n    public int val;\n    public List<Node> neighbors;\n\n    public Node() {}\n\n    public Node(int _val,List<Node> _neighbors) {\n        val = _val;\n        neighbors = _neighbors;\n    }\n};\n*/\nclass Solution {\n    public Node cloneGraph(Node node) {\n        if (node == null) {\n            return node;\n        }\n\n        // Hash map to save the visited node and it's respective clone\n        // as key and value respectively. This helps to avoid cycles.\n        HashMap<Node, Node> visited = new HashMap();\n\n        // Put the first node in the queue\n        LinkedList<Node> queue = new LinkedList<Node> ();\n        queue.add(node);\n        // Clone the node and put it in the visited dictionary.\n        visited.put(node, new Node(node.val, new ArrayList()));\n\n        // Start BFS traversal\n        while (!queue.isEmpty()) {\n            // Pop a node say \"n\" from the from the front of the queue.\n            Node n = queue.remove();\n            // Iterate through all the neighbors of the node \"n\"\n            for (Node neighbor: n.neighbors) {\n                if (!visited.containsKey(neighbor)) {\n                    // Clone the neighbor and put in the visited, if not present already\n                    visited.put(neighbor, new Node(neighbor.val, new ArrayList()));\n                    // Add the newly encountered node to the queue.\n                    queue.add(neighbor);\n                }\n                // Add the clone of the neighbor to the neighbors of the clone node \"n\".\n                visited.get(n).neighbors.add(visited.get(neighbor));\n            }\n        }\n\n        // Return the clone of the node from visited.\n        return visited.get(node);\n    }\n}","compare_result":"1111111111111111111111","title_slug":"clone-graph","has_notes":false},{"id":929540992,"lang":"java","lang_name":"Java","time":"3 days","timestamp":1680861480,"status":10,"status_display":"Accepted","runtime":"10 ms","url":"/submissions/detail/929540992/","is_pending":"Not Pending","title":"Number of Enclaves","memory":"57.1 MB","code":"class Solution {\n    public int numEnclaves(int[][] grid) {\n        for(int i=0;i<grid.length;i++){\n                fill(grid, i, 0);\n                fill(grid, i, grid[0].length-1);\n        }\n        for(int i=0;i<grid[0].length;i++){\n                fill(grid, 0, i);\n                fill(grid, grid.length-1, i);\n        }\n        int count = 0;\n        for(int i=1;i<grid.length-1;i++){\n            for(int j=1;j<grid[0].length-1;j++){\n                if(grid[i][j] == 1){\n                    // fill(grid, i ,j);\n                    count++;\n                }\n\n            }\n        }\n        return count;        \n    }\n    public void fill(int[][] grid, int i, int j) {\n        if(i<0 || j<0 || i>=grid.length || j>=grid[0].length || grid[i][j] ==0)\n            return;\n        \n        grid[i][j] = 0;\n\n        int[] dir = new int[]{0,1,0,-1,0};\n\n        for(int k=0;k<4;k++){\n            fill(grid, i+dir[k], j+dir[k+1]);\n        }\n\n    }\n}","compare_result":"1111111111111111111111111111111111111111111111111111111111","title_slug":"number-of-enclaves","has_notes":false},{"id":929540785,"lang":"java","lang_name":"Java","time":"3 days","timestamp":1680861449,"status":15,"status_display":"Runtime Error","runtime":"N/A","url":"/submissions/detail/929540785/","is_pending":"Not Pending","title":"Number of Enclaves","memory":"N/A","code":"class Solution {\n    public int numEnclaves(int[][] grid) {\n        for(int i=0;i<grid.length;i++){\n                fill(grid, i, 0);\n                fill(grid, i, grid[0].length-1);\n        }\n        for(int i=0;i<grid[0].length;i++){\n                fill(grid, 0, i);\n                fill(grid, grid.length-1, i);\n        }\n        int count = 0;\n        for(int i=1;i<grid.length-1;i++){\n            for(int j=1;j<grid[0].length-1;j++){\n                if(grid[i][j] == 1){\n                    // fill(grid, i ,j);\n                    count++;\n                }\n\n            }\n        }\n        return count;        \n    }\n    public void fill(int[][] grid, int i, int j) {\n        if(i<0 || j<0 || i>=grid.length || j>=grid.length || grid[i][j] ==0)\n            return;\n        \n        grid[i][j] = 0;\n\n        int[] dir = new int[]{0,1,0,-1,0};\n\n        for(int k=0;k<4;k++){\n            fill(grid, i+dir[k], j+dir[k+1]);\n        }\n\n    }\n}","compare_result":"1110000000000000000000000000000000000000000000000000000000","title_slug":"number-of-enclaves","has_notes":false},{"id":929235787,"lang":"java","lang_name":"Java","time":"3 days, 14 hours","timestamp":1680809881,"status":10,"status_display":"Accepted","runtime":"0 ms","url":"/submissions/detail/929235787/","is_pending":"Not Pending","title":"Search Insert Position","memory":"41.8 MB","code":"class Solution {\n    public int searchInsert(int[] nums, int target) {\n        int start =0 , end = nums.length-1;\n        if(nums == null || nums.length == 0) return 0;\n\n        while(start<end){\n            int mid = start + (end-start)/2;\n            if(nums[mid] == target) return mid;\n            else if(nums[mid] > target)\n                end = mid;\n            \n            else \n                start = mid+1;\n        }\n        return nums[start] >= target? start : start+ 1;\n    }\n}","compare_result":"11111111111111111111111111111111111111111111111111111111111111111","title_slug":"search-insert-position","has_notes":false}],"has_next":true,"last_key":"%7B%22pk%22%3A%20%7B%22N%22%3A%20%22929235787%22%7D%2C%20%22dt%22%3A%20%7B%22S%22%3A%20%222023-04-06T19%3A38%3A01.885247%2B0000%22%7D%2C%20%22sid%22%3A%20%7B%22N%22%3A%20%22785020%22%7D%7D"}SELECT
    weather.id AS 'Id'
FROM
    weather
        JOIN
    weather w ON DATEDIFF(weather.recordDate, w.recordDate) = 1
        AND weather.Temperature > w.Temperature
;